from flask import Flask, request
import requests
import json
import os
from utils import load_json, save_json

with open("config.json") as f:
    config = json.load(f)

BOT_TOKEN = config["bot_token"]
ADMIN_CHAT_ID = config["admin_chat_id"]
DEFAULT_WM = config.get("default_wm", "2594")
CPA_API_ADD = "https://api.cpa.moe/ext/add.json?id=2594-1631fca8ff4515be7517265e1e62b755"
CPA_API_STATUS = "https://api.cpa.moe/ext/list.json?id=2594-1631fca8ff4515be7517265e1e62b755&ids="

API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

users = load_json("users.json")
admin_session = {"authorized": False}
leads = load_json("leads.json")
offers = load_json("offers.json")

app = Flask(__name__)


def send_message(chat_id, text, reply_markup=None):
    data = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    requests.post(f"{API_URL}/sendMessage", data=data)


def get_keyboard(is_admin=False):
    base_buttons = ["–û—Ñ—Ñ–µ—Ä–∏", "–ú–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è", "–°—Ç–∞—Ç—É—Å–∏", "–ú–æ–≤–∞"]
    if is_admin:
        base_buttons.append("–ê–¥–º—ñ–Ω")
    keyboard = [[{"text": b1}, {"text": b2}] if b2 else [{"text": b1}]
                for b1, b2 in zip(base_buttons[::2], base_buttons[1::2] + [None])]
    return {"keyboard": keyboard, "resize_keyboard": True}


@app.route("/webhook", methods=["POST"])
def webhook():
    update = request.get_json()
    if "message" not in update:
        return "ok"

    msg = update["message"]
    chat_id = msg["chat"]["id"]
    user_id = str(chat_id)
    text = msg.get("text", "")
    is_admin = (chat_id == ADMIN_CHAT_ID)

    # —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
    if user_id not in users:
        wm_code = user_id[-4:]
        users[user_id] = {
            "wm": wm_code,
            "username": msg["chat"].get("username", ""),
            "first_name": msg["chat"].get("first_name", "")
        }
        save_json("users.json", users)

    user_wm = users[user_id]["wm"]

    # /start
    if text.startswith("/start"):
        name = msg["chat"].get("first_name", "")
        welcome = f"""
üëã –ü—Ä–∏–≤—ñ—Ç, {name}!

–¢–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ –ø–∞–Ω–µ–ª—ñ –∑–∞–ª–∏–≤—É üì≤

–¶–µ–π –±–æ—Ç:
üîó ‚Äî –≤–∏–¥–∞—î —Ç–≤–æ—î —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
üìä ‚Äî –ø–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å–∏ –ª—ñ–¥—ñ–≤
üì• ‚Äî —Å–ø–æ–≤—ñ—â–∞—î –ø—Ä–æ –Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏
‚öôÔ∏è ‚Äî –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω–∫–∏ (–ª–∏—à–µ –¥–ª—è –±–æ—Å–∞)

üëá –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂—á–µ:
"""
        send_message(chat_id, welcome, get_keyboard(is_admin))
        return "ok"

    # –∫–Ω–æ–ø–∫–∏
    if text == "–ú–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è":
        send_message(chat_id, f"üîó –í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\nhttps://fortemax.store?wm={user_wm}")
        return "ok"

    if text == "–ú–æ–≤–∞":
        send_message(chat_id, "üåê –ü–æ–∫–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞.")
        return "ok"

    if text == "–ê–¥–º—ñ–Ω":
        if is_admin:
            return send_admin_panel(chat_id)
        else:
            send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return "ok"

    if text == "–û—Ñ—Ñ–µ—Ä–∏":
        offer_buttons = [[{"text": offer["name"]}] for offer in offers.values()]
        send_message(chat_id, "üì¶ –û–±–µ—Ä–∏ –æ—Ñ—Ñ–µ—Ä:", {"keyboard": offer_buttons, "resize_keyboard": True})
        return "ok"

    if text == "–°—Ç–∞—Ç—É—Å–∏":
        return get_lead_statuses(user_wm, chat_id)

    # –æ—Ñ—Ñ–µ—Ä –æ–±—Ä–∞–Ω–æ
    for offer_id, offer in offers.items():
        if text == offer["name"]:
            link = f"{offer['domain']}?wm={user_wm}&offer={offer_id}"
            send_message(chat_id, f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è <b>{offer['name']}</b>:\n{link}")
            return "ok"

    return "ok"


@app.route("/lead", methods=["POST"])
def receive_lead():
    data = request.json
    wm = data.get("wm", "") or DEFAULT_WM

    payload = {
        "id": "auto",
        "wm": wm,
        "offer": data.get("offer", ""),
        "name": data.get("name", ""),
        "phone": data.get("phone", ""),
        "ip": data.get("ip", ""),
        "ua": data.get("user_agent", ""),
        "country": data.get("country", ""),
        "currency": "EUR",
        "us": data.get("utm_source", ""),
        "um": data.get("utm_medium", ""),
        "uc": data.get("utm_campaign", ""),
        "ut": data.get("utm_term", ""),
        "un": data.get("utm_content", ""),
        "params": {
            "referer": data.get("referer", ""),
            "datetime": data.get("datetime", "")
        }
    }

    response = requests.post(CPA_API_ADD, json=payload)
    result = response.json()

    if result.get("status") == "ok" and "uid" in result:
        uid = result["uid"]
        leads.setdefault(wm, []).append(uid)
        save_json("leads.json", leads)

        for uid_user, info in users.items():
            if info["wm"] == wm:
                send_message(int(uid_user), "üü¢ –ù–æ–≤–∏–π –ª—ñ–¥ –Ω–∞ –≤–∞—à–æ–º—É –æ—Ñ—Ñ–µ—Ä—ñ!")
                break

        send_message(ADMIN_CHAT_ID, f"üì• –ù–æ–≤–∏–π –ª—ñ–¥ –≤—ñ–¥ wm:{wm}")
        return {"status": "ok", "uid": uid}, 200

    return {"status": "error", "message": result.get("error", "Unknown error")}, 400


def get_lead_statuses(wm, chat_id):
    uid_list = leads.get(wm, [])
    if not uid_list:
        send_message(chat_id, "‚ùó –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ª—ñ–¥—ñ–≤.")
        return "ok"

    try:
        url = CPA_API_STATUS + ",".join(uid_list)
        response = requests.get(url)
        result = response.json()

        statuses = {
            "–û–∂–∏–¥–∞–µ—Ç": "‚è≥ –û—á—ñ–∫—É—î",
            "–•–æ–ª–¥": "üü° –í —Ö–æ–ª–¥—ñ",
            "–ü—Ä–∏–Ω—è—Ç": "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ",
            "–û—Ç–º–µ–Ω–∞": "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ",
            "–¢—Ä–µ—à": "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ"
        }

        lines = []
        for uid, info in result.get("leads", {}).items():
            raw = info.get("status", "–ù–µ–≤—ñ–¥–æ–º–æ")
            display = statuses.get(raw, f"‚ùì {raw}")
            lines.append(f"{display} ‚Äî <code>{uid}</code>")

        send_message(chat_id, "üìä <b>–°—Ç–∞—Ç—É—Å–∏ –ª—ñ–¥—ñ–≤:</b>\n" + "\n".join(lines))
    except Exception as e:
        send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ: {e}")
    return "ok"


def send_admin_panel(chat_id):
    user_count = len(users)
    wm_list = "\n".join([f"{u['first_name']} ‚Üí {u['wm']}" for u in users.values()])
    text = f"""
üõ†Ô∏è <b>–ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨</b>

üë§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—î—Ä—ñ–≤: {user_count}

üìã –°–ø–∏—Å–æ–∫:
{wm_list}
    """.strip()
    send_message(chat_id, text)
    return "ok"


@app.route('/')
def index():
    return "Bot is running."


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
